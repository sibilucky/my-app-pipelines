 pipeline {
    agent any

    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Git branch to build')
    }

    environment {
        GIT_URL = 'https://github.com/sibilucky/my-app-pipelines.git'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Dynamically set the branch using the parameter GIT_BRANCH
                    def branchName = params.GIT_BRANCH  // Use the parameter value from user input
                    echo "Checking out branch: ${branchName}"
                    
                    // Checkout the repository using the dynamically set branch name
                    git branch: branchName, url: "https://github.com/sibilucky/my-app-pipelines.git"
                }
            }
        }

        // Other stages like Build, Deploy, etc.
        stage('Build') {
            steps {
                script {
                    echo "Building the project with Maven..."
                    sh 'mvn clean install'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "Deploying to Docker..."
                    
                    // Build Docker image
                    sh "docker build -t sibisam2301/maven:${params.TAG_NUMBER} ."

                    // Login to Docker Hub securely
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials-id', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin"
                    }

                    // Push the Docker image to Docker Hub
                    sh "docker push sibisam2301/maven:${params.TAG_NUMBER}"

                    // Run the Docker container with the specified host port
                    sh "docker run -d -p ${params.HOST_PORT}:7079 sibisam2301/maven:${params.TAG_NUMBER}"
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution finished."
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
